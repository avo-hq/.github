FROM avo_base

ARG NAME

# Move pluggy to root
RUN cp -r /avo/pluggy /pluggy
# Remove /avo base directory if we build Avo
RUN rm -rf /avo

WORKDIR /${NAME}/

# Move pluggy to Avo
RUN cp -r /pluggy /avo/pluggy

# Create required directories
RUN mkdir /${NAME}/lib
RUN mkdir /${NAME}/lib/${NAME}

ENV BUNDLE_WITHOUT=development:test

# Cache the bundle install command with a fake version
COPY ./avo/tmp/Gemfile_v1.lock /${NAME}/Gemfile.lock
COPY ./avo/tmp/version_v1.rb /${NAME}/lib/${NAME}/version.rb

COPY ./avo/Gemfile /${NAME}/Gemfile
COPY ./avo/Rakefile /${NAME}/
COPY ./avo/${NAME}.gemspec /${NAME}/
COPY ./avo/lib/${NAME}.rb /${NAME}/lib/${NAME}.rb
COPY ./avo/package.json /${NAME}/
COPY ./avo/yarn.lock /${NAME}/

# RUN ls -la /avo

RUN bundle install --jobs 4 --retry 3
RUN yarn install

# Re-run bundle install with the appropriate version number
COPY ./avo/lib/${NAME}/version.rb /${NAME}/lib/${NAME}/version.rb
# Remove gems used to test things locally
RUN bundle config set --local without 'development:test'

# Copy the files
COPY ./avo /${NAME}

COPY ./prommy /prommy
COPY ./avo_pro /avo_pro
COPY ./avo_advanced /avo_advanced
COPY ./avo_dashboards /avo_dashboards
COPY ./avo_filters /avo_filters
COPY ./avo_menu /avo_menu
COPY ./avo_nested_resources /avo_nested_resources
COPY ./support /support
RUN ls -la /avo_dashboards

# Run the install again
RUN bundle install --jobs 4 --retry 3
RUN yarn install
RUN yarn check --integrity

ENV AVO_ENGINES=avo:/avo,avo_advanced:/avo_advanced,avo_pro:/avo_pro,avo_filters:/avo_filters,avo_dashboards:/avo_dashboards,avo_menu:/avo_menu,avo_nested_resources:/avo_nested_resources

# Build assets
RUN yarn build

# Build gem
RUN bundle exec rails build
